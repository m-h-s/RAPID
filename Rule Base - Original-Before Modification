############################ NFR Requirements Catalogues ######################################################
#############################  NFR to NFR Catalogues (NFR <- NFR) #####################################################



(Accessibility [API], Usability [API]) ---OR---> Adoptability [API]:NF_REF
(Access Simplicity [API], Access Frequency [API], Access Durability [API]) ---AND---> Accessibility [API]:NF_REF
(Usage Simplicity [API], Learnability [API], Efficiency [API]) ---OR---> Usability [API]:NF_REF
######### There are more LHS terms in the usability side. They should be checked.

(Stability [API], Backward Compatibility [API]) ---AND---> Evolvability [API]:NF_REF

(Confidentiality [API], Privacy [API], Reliability [API], Auditability [API]) ---AND---> Security [API]:NF_REF
#########Auditability [API] should be revised and reconsidered again. Does it mean trace-ability?
(Message Privacy [API], Service Privacy [API]) ---AND---> Privacy [API]:NF_REF
(Availability [API], Robustness [API], Integrity [API]) ---AND---> Reliability [API]:NF_REF

(Response Time [API], Latency [API], Timeliness [API], Capacity [API], Load Concurrency [API], Throughput [API] ) ---OR---> Performance [API]:NF_REF
#########The difference between throughput and response time should be clarified.

(Loose Coupling [API]) ---HELP---> Extensibility [API]:NF_REF

#########(Capacity [API]) ---EQUAL---> Request Load [API]:NF_REF
#########(Request Load [API]) ---EQUAL---> Capacity [API]:NF_REF
#########(Access Continuity [API]) ---EQUAL---> Access Frequency [API]: NF_REF
#########(Access Frequency [API]) ---EQUAL---> Access Continuity [API]: NF_REF
######### A loop is created by the above two rules.
######### Moreover, access continuity is vague. It should be broken down into clearer terms.



#################################NFR Operationalization Catalogues###########################################
#################################  NFR to FR Catalogues (NFR <- FR (what type?)) ########################################################


(Replication [], Load Balancing [API]) ---AND---> Throughput [API]:OP_NF_REF

######(Access Authorization [API]) ---HELP---> Confidentiality [API]:OP_NF_REF

(Access Authorization [API], Disguising [API Responses]) ---OR---> Confidentiality [API]:OP_NF_REF

(Control Requests Traffic [API]) ---HELP---> Capacity [API]:OP_NF_REF

#####(Cashing [API Responses]) ---HELP---> Response Time [API]:OP_NF_REF
##### What is the difference between response time and timeliness.

(Cashing [API], Load Balancing [API]) ---OR---> Response Time [API]:OP_NF_REF

#####(Disguising [API Responses]) ---HELP---> Privacy [API]:OP_NF_REF
(Disguising [API Responses], Providing Secure Communication Channels between Clients and API [] ) ---OR---> Message Privacy [API]:OP_NF_REF
###(Disguising [API Responses], Providing Secure Communication Channels between Clients and API [] ) ---OR---> Service Privacy [API]:OP_NF_REF

(Failure Recovery  []) ---HELP---> Robustness [API]:OP_NF_REF


#########(Traffic Prioritization [API]) ---HELP---> Response Time [API]:OP_NF_REF
######### I am not sure whether traffic prioritization help response time or some other factor.
######### There are different methods and techniques for traffic prioritization. FIFO, Priority-Based,...
#########The above rule should be reconsidered. terms should be corrected.

(Service Registry [], Service Discovery []) ---AND---> Loose Coupling [API]:OP_NF_REF







################################Functional Requirement to Functional Requirement Catalogues###################
################################  FR to FR Catalogues (FR (Coarse-Grained) <- FR (Fine-Grained)) ####################


########(Limit [API Calls]) ---HELP---> Control Requests Traffic [API]:OP_FF_REF


###########################Functional Requirement to Design Alternative (Implementation) Catalogues############
###############################################################################################################

(API-key [], Username and password [], Mutual Certificate-Based Authentication [], Open Authorization Version 2 [], OpenID Connect Version 1.0 []) ---OR---> Access Authorization [API]:OP_FI_REF

(Spike Arrest [], Consumption Quota [], Concurrent Rate Limit [], Traffic Prioritization []) ---OR---> Traffic Control [API]:OP_FI_REF






(Cashing Most Common Requests [], Cashing Most Recent Requests [], Cashing Most Probable Requests in the Near Future []) ---OR---> Cashing [API]:OP_FI_REF

## (Encryption [], Data Masking []) ---OR---> Disguising [API Responses]:OP_FI_REF


(One-to-One Synchronous Communication [], One-to-One Asynchronous Communication [], One-to-One Synchronous to Asynchronous Communication [], One-to-Many Publish and Subscribe [] )---OR---> Communication Mechanism [API]:OP_FI_REF
##### I do not know what the difference is between encryption and data masking 
#####Is data masking the right term for API responses?

(Round Rubin Request Distribution [], Least Connections Request Distribution [], IP Hash Request Distribution[]) ---OR---> Load Balancing [API]:OP_FI_REF

(Response Time-outs [], Providing Fall-backs [], Circuit Breaker Pattern [], Limiting the Number of Outstanding Requests []) ---OR---> Failure Recovery  []:OP_FI_REF

(Client/Server Self Registration [], Client/Server Third-Party Registration []) ---OR---> Service Registry  []:OP_FI_REF



##########################Correlation Catalogues################################################################
############################Relationship between design alternatives and NFRS###################################


(API-key []) ---MAKE---> Access Simplicity [API]:COR
(API-key []) ---MAKE---> Usage Simplicity [API]:COR
(API-key []) ---HELP---> Confidentiality [API]:COR
(API-key []) ---BREAK---> Message Privacy [API]:COR
(API-key []) ---BREAK---> Service Privacy [API]:COR
(API-key []) ---MAKE---> Latency [API]:COR
(API-key []) ---MAKE---> Response Time [API]:COR

(Username and password []) ---MAKE---> Access Simplicity [API]:COR
(Username and password []) ---MAKE---> Usage Simplicity [API]:COR
(Username and password []) ---HELP---> Confidentiality [API]:COR
(Username and password []) ---SOMEPLUS---> Message Privacy [API]:COR
(Username and password []) ---HELP---> Service Privacy [API]:COR
(Username and password []) ---SOMEMINUS---> Latency [API]:COR
(Username and password []) ---SOMEMINUS---> Response Time [API]:COR

(Mutual Certificate-Based Authentication []) ---BREAK---> Access Simplicity [API]:COR
(Mutual Certificate-Based Authentication []) ---BREAK---> Usage Simplicity [API]:COR
(Mutual Certificate-Based Authentication []) ---MAKE---> Confidentiality [API]:COR
(Mutual Certificate-Based Authentication []) ---MAKE---> Message Privacy [API]:COR
(Mutual Certificate-Based Authentication []) ---SOMEMINUS---> Service Privacy [API]:COR
(Mutual Certificate-Based Authentication []) ---SOMEMINUS---> Latency [API]:COR

(Open Authorization Version 2 []) ---SOMEMINUS---> Access Simplicity [API]:COR
(Open Authorization Version 2 []) ---SOMEMINUS---> Usage Simplicity [API]:COR
(Open Authorization Version 2 []) ---HELP---> Confidentiality [API]:COR
(Open Authorization Version 2 []) ---SOMEPLUS---> Message Privacy [API]:COR
(Open Authorization Version 2 []) ---SOMEPLUS---> Service Privacy [API]:COR
(Open Authorization Version 2 []) ---SOMEMINUS---> Latency [API]:COR
(Open Authorization Version 2 []) ---SOMEMINUS---> Response Time [API]:COR

(OpenID Connect Version 1.0 []) ---BREAK---> Access Simplicity [API]:COR
(OpenID Connect Version 1.0 []) ---SOMEMINUS---> Usage Simplicity [API]:COR
(OpenID Connect Version 1.0 []) ---SOMEPLUS---> Confidentiality [API]:COR
(OpenID Connect Version 1.0 []) ---SOMEPLUS---> Message Privacy [API]:COR
(OpenID Connect Version 1.0 []) ---SOMEPLUS---> Service Privacy [API]:COR
(OpenID Connect Version 1.0 []) ---BREAK---> Latency [API]:COR


######


(Spike Arrest []) ---MAKE---> Robustness [API]:COR
(Spike Arrest []) ---HURT---> Availability [API]:COR
(Spike Arrest []) ---HURT---> Integrity [API]:COR
(Spike Arrest []) ---SOMEMINUS---> Timeliness [API]:COR

(Consumption Quota []) ---MAKE---> Robustness [API]:COR
(Consumption Quota []) ---HURT---> Availability [API]:COR
(Consumption Quota []) ---SOMEPLUS---> Integrity [API]:COR
(Consumption Quota []) ---HURT---> Access Continuity [API]:COR

(Concurrent Rate Limit []) ---MAKE---> Robustness [API]:COR
(Concurrent Rate Limit []) ---HURT---> Availability [API]:COR
(Concurrent Rate Limit []) ---HURT---> Integrity [API]:COR
(Concurrent Rate Limit []) ---SOMEMINUS---> Timeliness [API]:COR


#####

(Traffic Prioritization []) ---SOMEMINUS---> Integrity [API]: COR
(Traffic Prioritization []) ---SOMEPLUS---> Response Time [API]: COR


#####

###### The difference between timeliness and performance is not clear.########
(Cashing Most Common Requests []) ---HELP---> Timeliness [API]: COR
(Cashing Most Common Requests []) ---HELP---> Response Time [API]: COR
(Cashing Most Common Requests []) ---SOMEMINUS---> Integrity [API]: COR

########## Timeliness == Response-Time and Latency. It should probably be eliminated.


(Cashing Most Recent Requests []) ---HELP---> Timeliness [API]: COR
(Cashing Most Recent Requests []) ---HELP---> Response Time [API]: COR
(Cashing Most Recent Requests []) ---SOMEMINUS---> Integrity [API]: COR


(Cashing Most Probable Requests in the Near Future []) ---HELP---> Timeliness [API]: COR
(Cashing Most Probable Requests in the Near Future []) ---HELP---> Response Time [API]: COR
(Cashing Most Probable Requests in the Near Future []) ---SOMEMINUS---> Integrity [API]: COR

######

(Encryption []) ---HELP---> Privacy [API]: COR
(Encryption []) ---HELP---> Confidentiality [API]: COR
(Encryption []) ---HURT---> Response Time [API]: COR

(Data Masking []) ---HELP---> Privacy [API]: COR
(Data Masking []) ---HELP---> Confidentiality [API]: COR
(Data Masking []) ---HURT---> Response Time [API]: COR

######

(Client/Server Self Registration []) ---HURT---> Usage Simplicity [API]:COR
(Client/Server Self Registration []) ---HURT---> Security [API]:COR

######


(One-to-One Synchronous Communication []) ---BREAK---> Loose Coupling [API]:COR
(One-to-One Synchronous Communication []) ---HURT---> Robustness [API]:COR
(One-to-One Synchronous Communication []) ---SOMEPLUS---> Integrity [API]:COR
(One-to-One Synchronous Communication []) ---MAKE---> Response Time [API]:COR
(One-to-One Synchronous Communication []) ---BREAK---> Throughput [API]:COR



(One-to-One ASynchronous Communication []) ---MAKE---> Loose Coupling [API]:COR
(One-to-One ASynchronous Communication []) ---SOMEPLUS---> Robustness [API]:COR
(One-to-One ASynchronous Communication []) ---SOMEMINUS---> Integrity [API]:COR
(One-to-One ASynchronous Communication []) ---HURT---> Response Time [API]:COR
(One-to-One ASynchronous Communication []) ---MAKE---> Throughput [API]:COR


(One-to-One Synchronous to ASynchronous Communication []) ---MAKE---> Loose Coupling [API]:COR
(One-to-One Synchronous to ASynchronous Communication []) ---MAKE---> Robustness [API]:COR
(One-to-One Synchronous to ASynchronous Communication []) ---SOMEPLUS---> Integrity [API]:COR
(One-to-One Synchronous to ASynchronous Communication []) ---HELP---> Response Time [API]:COR
(One-to-One Synchronous to ASynchronous Communication []) ---SOMEPLUS---> Throughput [API]:COR
(One-to-One Synchronous to ASynchronous Communication []) ---SOMEPLUS---> Interoperability [API]:COR
###### Interface compatibility [API] == Interoperability [API]


(One-to-Many Publish and Subscribe []) ---MAKE---> Loose Coupling [API]:COR
(One-to-Many Publish and Subscribe []) ---MAKE---> Interface Stability [API]:COR
(One-to-Many Publish and Subscribe []) ---HELP---> Confidentiality [API]:COR
(One-to-Many Publish and Subscribe []) ---HURT---> Robustness [API]:COR
(One-to-Many Publish and Subscribe []) ---HURT---> Response Time [API]:COR
(One-to-Many Publish and Subscribe []) ---HELP---> Interoperability [API]:COR
(One-to-Many Publish and Subscribe []) ---SOMEPLUS---> Usage Simplicity [API]:COR
###### Interface compatibility [API] == Interoperability [API]











